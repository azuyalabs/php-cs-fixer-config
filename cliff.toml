# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[remote.github]
owner = "azuyalabs"
repo = "php-cs-fixer-config"

[changelog]

header = """
# Changelog\n
All notable changes to this project will be documented in this file.

This project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html) and
[Conventional Commits](https://conventionalcommits.org) for commit conventions.\n
"""

body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [unreleased]
{% endif -%}

{% for group, commits in commits | unique(attribute="message") | filter(attribute="merge_commit", value=false) | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}({{ commit.scope | upper_first }}) {% endif%}{{ commit.message | split(pat="\n") | first | split(pat=": ") | last | trim | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""

footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
                    /compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
            /compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
"""

# Remove leading and trailing whitespaces from the changelog's body.
trim = true

[git]

# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true

# Exclude commits that do not match the conventional commits specification.
filter_unconventional = true

# Split commits on newlines, treating each line as an individual commit.
split_commits = false

# An array of regex based parsers to modify commit messages prior to further processing.
commit_preprocessors = [
  { pattern = "\\(#([0-9]+)\\)", replace = "([#${1}](<REPO>/issues/${1}))"},

  # Check spelling of the commit message using https://github.com/crate-ci/typos.
  # If the spelling is incorrect, it will be fixed automatically.
  { pattern = '.*', replace_command = 'typos --write-changes -' }
]

# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
  # skip commits related to composer (e.g. package updates)
  { message = "^chore\\(composer\\)", skip = true },
  { message = ".*dependencies", skip = true },

  # skip commits related to fixes of code style issues
  { message = "^chore\\(style\\)", skip = true },

  { message = "^docs:.*copyright", skip = true },

  # skip merge commits
  { message = "^[Mm]erge", skip = true },

  { message = "^chore\\(release\\): prepare for", skip = true },

  { message = "^feat", group = "<!-- 0 -->Features" },
  { message = "^fix", group = "<!-- 1 -->Fixes" },
  { message = "^refactor", group = "<!-- 2 -->Refactor" },
  { message = "^perf", group = "<!-- 3 -->Performance" },
  { message = "^doc", group = "<!-- 4 -->Documentation" },
  { message = "^style", group = "<!-- 5 -->Code Style" },
  { message = "^test", group = "<!-- 6 -->Testing" },
  { message = "^chore|^ci|^build", group = "<!-- 7 -->Other" },
]

# Prevent commits that are breaking from being excluded by commit parsers.
protect_breaking_commits = false

# Exclude commits that are not matched by any commit parser.
filter_commits = true

# Regex to select git tags that represent releases.
tag_pattern = "[0-9].*"

# Regex to select git tags that do not represent proper releases.
# Takes precedence over `tag_pattern`.
# Changes belonging to these releases will be included in the next release.
skip_tags = "beta|alpha"

# Regex to exclude git tags after applying the tag_pattern.
ignore_tags = ""

# Order releases topologically instead of chronologically.
topo_order = false

# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "newest"
